# lackofcheese

#! /usr/bin/env python
from __future__ import print_function, division
try:
    range = xrange
except NameError:
    pass

# import collections
# import functools
# import itertools as it
import numpy as np # See http://www.numpy.org
# import sympy as sp # See http://sympy.org/en/index.html
# import gmpy2 # See https://code.google.com/p/gmpy/
# import networkx as nx # See http://networkx.github.io/

import os
import sys
# MY MODULES - available at https://github.com/lackofcheese/CodeJamLib/
sys.path.append(os.path.join(
    os.environ['GOOGLE_DRIVE'], 'Coding', 'GCJ', 'CodeJamLib'))
import codejam_io

def toks_line(f_in, fun=int):
    return [fun(k) for k in f_in.readline().split()]

def process_first(f_in):
    num_cases = int(f_in.readline())
    other_data = None
    return num_cases, other_data

def process_case(f_in, f_out, case_no, other_data=None):
    N = int(f_in.readline())
    ans = solve(N)
    print("Case #{}: {}".format(case_no, ans), file=f_out)

def solve(N):
    digits = np.array(list(str(N)))
    fix(digits)
    return int(''.join(digits))

def decrement(digits):
    v = int(''.join(digits))
    v = v-1
    new_digits = str(v).zfill(len(digits))
    digits[:] = list(new_digits)

def fix(digits):
    last_digit = '-'
    for index, digit in enumerate(digits):
        if digit < last_digit:
            decrement(digits[:index])
            fix(digits[:index])
            digits[index:] = '9'
            break
        last_digit = digit

if __name__ == '__main__':
    codejam_io.process_input(process_case, process_first, __file__)
